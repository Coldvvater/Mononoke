# > Loon Config Make by Coldvvater
# > TG Channel: https://t.me/Ison_Channel
# > GitHub: https://github.com/Coldvvater
# > Update Date: 2023.05.03

[General]
# > IPv6 支持
ipv6 = true

# > 跳过某个域名或者IP段
skip-proxy = 127.0.0.1, 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, 100.64.0.0/10, 17.0.0.0/8, localhost, *.local, *.crashlytics.com, www.baidu.com, yunbusiness.ccb.com

# > Tun 旁路路由
bypass-tun = 10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,169.254.0.0/16,172.16.0.0/12,192.0.0.0/24,192.0.2.0/24,192.88.99.0/24,192.168.0.0/16,198.18.0.0/15,198.51.100.0/24,203.0.113.0/24,224.0.0.0/4,255.255.255.255/32

# > 解决一些ip请求无法匹配域名类规则的问题。real-ip指定的域名将不返回fake ip响应，直接将dns请求发往目标dns服务器
real-ip = *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com*.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, *.battlenet.com.cn, *.battlenet.com, *.blzstatic.cn, *.battle.net

# > DNS服务器
dns-server = 223.5.5.5,119.29.29.29,114.114.114.114

# > DoH加密DNS服务器
#doh-server = https://223.5.5.5/dns-query, https://1.12.12.12/dns-query

# > Wi-Fi 访问
# > 允许 Wi-Fi 网络下其它设备访问
allow-udp-proxy = false
allow-wifi-access = false
wifi-access-http-port = 7222
wifi-access-socket5-port = 7221

# > 代理测速 URL
proxy-test-url = http://cp.cloudflare.com/generate_204
# > 测速超时 (s)
test-timeout = 5

# > 解析器
resource-parser = https://raw.githubusercontent.com/Peng-YM/Sub-Store/master/backend/dist/sub-store-parser.loon.min.js

# > GEOIP数据库
geoip-url = https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb

# ssid-trigger参数，用于指定SSID下流量模式切换，（default表示默认，cellular表示蜂窝，目前支持三种值：rule，direct，proxy） 
# ssid-trigger="default":rule,"cellular":rule,"ASUS":direct,"TPLINK":proxy 

# > 接口模式
interface-mode = auto

[Host]
#可以指定一下四种模式：
#1、指定域名使用对应的IP地址
#2、将域名指向另一个域名
#3、指定域名请求DNS时使用特定的DNS服务器，格式为：google.com = server:8.8.8.8 或者 *.baidu.com = server:https://example.com/dns-query
#4、指定具体的SSID环境下使用特定的DNS服务器，如：
#ssid:LOON's WIFI = server:system
#ssid:LOON WIFI = server:https://example.com/dns-query
*.tw = server:1.1.1.1
localhost = 127.0.0.1
# > Firebase Cloud Messaging
mtalk.google.com = 108.177.125.188
# > Google Dl
dl.google.com = server:119.29.29.29
dl.l.google.com = server:119.29.29.29
update.googleapis.com = server:119.29.29.29
# > Apple
apple.com = server:223.5.5.5
*icloud.com = server:223.5.5.5
*icloud.com.cn = server:223.5.5.5
*testflight.apple.com = server:8.8.4.4
# > Alibaba
*.alicdn.com = server:223.5.5.5
aliyun.com = server:223.5.5.5
*.aliyun.com = server:223.5.5.5
taobao.com = server:223.6.6.6
*.taobao.com = server:223.6.6.6
tmall.com = server:223.6.6.6
*.tmall.com = server:223.6.6.6
# > JD
jd.com = server:119.29.29.29
*.jd.com = server:119.28.28.28
# > Tencent
*.qq.com = server:119.28.28.28
*.tencent.com = server:119.28.28.28
weixin.com = server:119.28.28.28
*.weixin.com = server:119.28.28.28
# > bilibili
bilibili.com = server:119.29.29.29
*.bilibili.com = server:119.29.29.29
hdslb.com = server:119.29.29.29
# > NetEase
163.com = server:119.29.29.29
*.163.com = server:119.29.29.29
126.com = server:119.29.29.29
*.126.com = server:119.29.29.29
*.126.net = server:119.29.29.29
*.127.net = server:119.29.29.29
*.netease.com = server:119.29.29.29
# > xiaomi
mi.com = server:119.29.29.29
*.mi.com = server:119.29.29.29
xiaomi.com = server:119.29.29.29
*.xiaomi.com = server:119.29.29.29
# > Baidu
*.baidu.com = server:119.29.29.29
*.bdstatic.com = server:119.29.29.29
# > Others
*.unicompayment.com = server:119.29.29.29
*.ximalaya.com = server:119.29.29.29
*.vercel.app = server:119.29.29.29
*.vercel.com = server:119.29.29.29
# > Local Area Network
*.lan = server:system

[Proxy]
# > 内置 DIRECT、REJECT 策略
# > 内置 PROXY 指向本地节点或者订阅节点中的任何一个（有本地节点默认指向第一个本地节点，当没有本地节点但有订阅节点时，指向第一个订阅的第一个节点，本地节点和订阅节点都不存在时指向DIRECT）
#ss
#ss1 = Shadowsocks,example.com,443,aes-128-gcm,"password",fast-open=false,udp=true
[Remote Proxy]

# > 策略组
[Proxy Group]
# > 漏网之鱼
Final = select,Proxy,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Final.png
# > 节点选择
Proxy = select,Auto,Fallback,Others,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Rocket.png
# > 自动筛选
Auto = url-test,url = http://cp.cloudflare.com/generate_204,interval = 300,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Auto.png
# > 故障转移
Fallback = fallback,url = http://cp.cloudflare.com/generate_204,interval = 300,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Available.png
# > 国外网站
Global = select,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,DIRECT,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Global.png
# > 国内网站
Mainland = select,DIRECT,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/China_Map.png
# > 哔哩哔哩
BiliBili = select,DIRECT,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/bilibili.png
# > 声田音乐
Spotify = select,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,DIRECT,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Spotify.png
# > 海外抖音
TikTok = select,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,DIRECT,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/TikTok.png
# > 国际媒体
Streaming = select,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Streaming.png
# > 电报信息
Telegram = select,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,DIRECT,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Telegram_X.png
# > 苹果服务
Apple = select,DIRECT,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Apple.png
# > 微软服务
Microsoft = select,DIRECT,Proxy,Auto,Fallback,HongKong,TaiWan,Japan,Singapore,America,Others,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Microsoft.png
# > 广告拦截
AdBlock = select,REJECT,DIRECT,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Advertising.png
# > 香港节点
HongKong = select,香港,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Hong_Kong.png
# > 台湾节点
TaiWan = select,台湾,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/China.png
# > 狮城节点
Singapore = select,新加坡,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Singapore.png
# > 日本节点
Japan = select,日本,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Japan.png
# > 美国节点
America = select,美国,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/United_States.png
# > 其他节点
Others = select,DIRECT,其他,img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Airport.png

[Remote Filter]
# > 筛选订阅节点，筛选后的结果可加入到策略组中，目前支持三种筛选方式
# > NodeSelect: 使用在UI上选择的节点。
# > NameKeyword: 根据提供的关键词对订阅中所有节点的名称进行筛选，使用筛选后的节点。
# > NameRegex: 根据提供的正则表达式对订阅中所有节点的名称进行筛选，使用筛选后的节点。
#Netflix = NodeSelect,Subs
#Hulu = NameKeyword,Subs,Subs2,FilterKey = Hulu
香港 = NameRegex, FilterKey = "(?i)(港|🇭🇰|HK|Hong)"
台湾 = NameRegex, FilterKey = "(?i)(台|🇨🇳|🇹🇼|湾|TW|Taiwan)"
新加坡 = NameRegex, FilterKey = "(?i)(新加坡|坡|狮城|🇸🇬|SG|Singapore)"
日本 = NameRegex, FilterKey = "(?i)(日|🇯🇵|东京|JP|Japan)"
美国 = NameRegex, FilterKey = "(?i)(美|🇺🇲|US|States|American)"
其他 = NameRegex, FilterKey = ".*"

# > Remote Rule
# > 订阅规则URL,策略
[Remote Rule]
# > 规则修正
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Unbreak.list, policy=DIRECT, tag=Unbreak, enabled=true
# > 广告拦截
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Advertising.list, policy=AdBlock, tag=Advertising, enabled=true
# > 隐私保护
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Privacy.list, policy=AdBlock, tag=Privacy, enabled=true
# > 运营劫持
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Hijacking.list, policy=AdBlock, tag=Hijacking, enabled=true
# > 哔哩哔哩分流
https://raw.githubusercontent.com/NobyDa/Script/master/Surge/Bilibili.list, policy=BiliBili, tag=BiliBili, enabled=true
# > Spotify分流
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Spotify/Spotify.list, policy=Spotify, tag=Spotify, enabled=true
# > TikTok分流
https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Loon/TikTok.list, tag=TikTok, enabled=true
# > 国际流媒体
https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list, policy=Streaming, tag=Streaming, enabled=true
# > 电报分流
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Telegram/Telegram.list, policy=Telegram, tag=Telegram, enabled=true
# > 国外网站分流
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Global.list, policy=Foreign, tag=Foreign, enabled=true
# > Apple分流
https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list, policy=Apple, tag=Apple, enabled=true
# > 微软分流
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Microsoft/Microsoft.list, policy=Microsoft, tag=Microsoft, enabled=true
# > 国内网站分流
https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list, policy=Mainland, tag=Mainland, enabled=true
# > LAN
https://gitlab.com/lodepuly/vpn_tool/-/raw/main/Tool/Loon/Rule/RULE_LAN, policy=DIRECT, tag=LAN, enabled=true
# > GEOIP CN
https://gitlab.com/lodepuly/vpn_tool/-/raw/main/Tool/Loon/Rule/RULE_REGION, policy=DIRECT, tag=GEOIP CN, enabled=true

# > 本地规则
[Rule]
# > Local RULE
# > Type:DOMAIN-SUFFIX,DOMAIN,DOMAIN-KEYWORD,USER-AGENT,URL-REGEX,IP-CIDR
# > Strategy:DIRECT,Proxy,REJECT
# > Options:no-resolve(no-resolve(only for cidr))
FINAL,Final

# > 重写规则
[URL Rewrite]

# > 订阅重写
[Remote Rewrite]

# > 脚本
[Script]
# > http-request 处理请求的脚本
# > http-response 处理请求响应的脚本
# > cron 定时脚本
# > network-changed   网络发生变化触发脚本
# > generic  通用型脚本，可用在操作节点/策略组中，执行是会带入节点名称和策略组名称，脚本必须在开启NE时

# http-request ^https?:\/\/(www.)?(example)\.com script-path=localscript.js,tag = requestScript,enable=true
# http-response ^https?:\/\/(www.)?(example)\.com script-path=https://example.com/loon.js,timeout=10,requires-body = true,tag = responseScript,enable=true
# cron "0 8 * * *" script-path=cron.js,tag = responseScript,enable=true
# > 流媒体解锁检测
generic script-path=https://raw.githubusercontent.com/Loon0x00/LoonScript/main/MediaCheck/check.js, tag=MediaCheck, img-url=checkmark.seal.system

# > 订阅脚本
[Remote Script]
# > 获取Cookie
https://raw.githubusercontent.com/Tartarus2014/Loon-Script/master/Cookie.conf, tag=GetCookie, enabled=false

# > 插件
[Plugin]
# plugin-url tag=tag,proxy=插件中PROXY所指向的策略,enable=true
# plugin策略可设置为DIRECT,REJECT,PROXY，其中PROXY为用户在app中手动映射的策略，rule后不跟随策略默认使用PROXY
# example: 

# > TestFlight账户管理
https://raw.githubusercontent.com/NobyDa/Script/master/Loon/Loon_TF_Account.plugin, tag=TestFlightAccount, enabled=true
# > 哔哩哔哩自动换区
https://raw.githubusercontent.com/Coldvvater/Mononoke/master/Loon/Plugin/Streaming/Bili_Auto_Regions.plugin, tag=BiliBili Auto Regions, enabled=true
# > 超级搜索引擎
https://raw.githubusercontent.com/Coldvvater/Mononoke/master/Loon/Plugin/Tool/Q-Search.plugin, enabled=true
# > Loon插件仓库
https://raw.githubusercontent.com/Peng-YM/Loon-Gallery/master/loon-gallery.plugin, tag=Loon Gallery, enabled=true
# > TestFlight解锁区域限制
https://raw.githubusercontent.com/Tartarus2014/Loon-Script/master/Plugin/TF-Download.plugin, tag=TestFlightDownload, enabled=false
# > 知乎App去广告
https://raw.githubusercontent.com/app2smile/rules/master/plugin/zhihu.plugin, tag=ZhihuAds, enabled=true
# > 去广告复写
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/Loon/Advertising/Advertising.plugin, tag=Advertising, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Advertising.png, enabled=true
# > 重定向
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/Loon/Redirect/Redirect.plugin, tag=Redirect, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Domestic.png, enabled=true
# > BoxJS
https://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.loon.tf.plugin, tag=BoxJs, enabled=true
# > 高级订阅工具
https://raw.githubusercontent.com/Peng-YM/Sub-Store/master/config/Loon.plugin, tag=Sub-Store, enabled=true

[MITM]
skip-server-cert-verify = true
