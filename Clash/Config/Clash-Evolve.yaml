# Clash Config Make by Coldvvater
# TG Channel: https://t.me/Ison_Channel
# GitHub主页: https://github.com/Coldvvater
# Update Date: 2023.04.21

subscribe-url: 填上你的订阅链接 # 替换文字用于Stash获取机场流量信息并在主页显示

mixed-port: 7890 # 本地混合代理(http和socks5合并）端口
allow-lan: true # 允许局域网连接(false/true)
bind-address: # 监听IP白名单（当allow-lan：true），只允许列表设备
  '*' # 全部设备
# 192.168.122.11 #单个ip4地址
# "[aaaa::a8aa:ff:fe09:57d8]" #单个ip6地址
mode: rule # clash工作模式（rule/global/direct）
log-level: info # 日志等级（info/warning/error/debug/silent）
ipv6: true # IP6解析开关；如果为false，将返回ip6结果为空
external-controller: 127.0.0.1:9090 # 控制器监听地址
dns: # DNS模块设置
  enable: true # DNS开关(false/true)
  listen: 0.0.0.0:1053 # DNS监听地址
  ipv6: true # IP6解析开关；如果为false，将返回ip6结果为空
  default-nameserver: # 解析非IP的dns用的dns服务器,只支持纯IP
    - 223.5.5.5
    - 119.29.29.29
    - 114.114.114.114
  enhanced-mode: fake-ip # DNS模式(redir-host/fake-ip)
  fake-ip-range: 198.18.0.1/16 # Fake-IP解析地址池
  fake-ip-filter: # Fake-ip过滤，列表中的域名返回真实ip
    - '*.lan' # Local Area Network
    - '+.stun.*.*' # Stun Services
    - '+.stun.*.*.*'
    - '+.stun.*.*.*.*'
    - '+.stun.*.*.*.*.*'
    - 'lens.l.google.com' # Google Voices
    - '*.n.n.srv.nintendo.net' # Nintendo Switch
    - '+.stun.playstation.net' # PlayStation
    - 'xbox.*.*.microsoft.com' # XBox
    - '*.*.xboxlive.com' # Microsoft
    - '*.msftncsi.com'
    - '*.msftconnecttest.com' # Bilibili CDN
    - '*.mcdn.bilivideo.cn'
  nameserver: # 默认DNS服务器，支持udp/tcp/dot/doh/doq
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query

tun: # TUN模式
  enable: true
  stack: system
  dns-hijack:
    - 'any:53'
  auto-route: true
  auto-detect-interface: true

c: &c {type: http, behavior: classical, interval: 86400} # 规则行为锚点

ip: &ip {type: http, behavior: ipcidr, interval: 86400}

p: &p {type: http, interval: 42300, health-check: {enable: true, url: http://cp.cloudflare.com/generate_204, interval: 300} # 代理提供商锚点

f: &f {type: select, proxies: [Proxy, Auto, Fallback, HongKong, TaiWan, Singapore, Japan, America, Others, DIRECT]} # 策略组锚点

d: &d {type: select, proxies: [DIRECT, Proxy, Auto, Fallback, HongKong, TaiWan, Singapore, Japan, America, Others]}

proxies: # 本地服务器

u: &u # 订阅引用锚点
  type: select
  use:
  - MySubs

proxy-providers: # 代理提供商
  MySubs: &MySubs
    <<: *p
    url: ""
    path: ./proxy_providers/mysubs.yaml # 1. 请使用Clash类型订阅链接填入引号""内使用, 2. 或可使用通用订阅链接通过Sub-Store进行订阅转换(用于Stash)。

proxy-groups: # 策略组

  - name: Final # 漏网之鱼
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Final.png
    <<: *f
    proxies:
      - Proxy

  - name: Proxy # 节点选择
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Rocket.png
    <<: *f
    proxies:
      - Auto
      - Fallback
      - Others

  - name: Auto # 自动筛选
    type: url-test
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Auto.png
    lazy: true # 在策略组没有被使用时候，不进行延迟测试
    <<: *u

  - name: Fallback #故障转移
    type: fallback
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Available.png
    <<: *u

  - name: Foreign # 国外网站
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Global.png
    <<: *f

  - name: Domestic # 国内网站
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/China_Map.png
    <<: *d

  - name: BiliBili # 哔哩哔哩
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/bilibili.png
    <<: *d

  - name: Spotify # 声田音乐
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Spotify.png
    <<: *f

  - name: TikTok # 海外抖音
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/TikTok.png
    <<: *f

  - name: Streaming # 国际媒体
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Streaming.png
    <<: *f

  - name: Telegram # 电报信息
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Telegram_X.png
    <<: *f

  - name: Apple # 苹果服务
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Apple.png
    <<: *d

  - name: Microsoft # 微软服务
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Microsoft.png
    <<: *d

  - name: AdBlock # 广告拦截
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Advertising.png
    <<: *f
    proxies:
      - REJECT
      - DIRECT

  - name: HongKong # 香港节点
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Hong_Kong.png
    <<: *u
    filter: 港|🇭🇰|HK|(?i)Hong

  - name: TaiWan # 台湾节点
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/China.png
    <<: *u
    filter: 台|🇨🇳|🇹🇼|湾|TW|(?i)Taiwan
  
  - name: Singapore # 狮城节点
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Singapore.png
    <<: *u
    filter: 新加坡|坡|狮城|🇸🇬|SG|(?i)Singapore

  - name: Japan # 日本节点
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Japan.png
    <<: *u
    filter: 日|🇯🇵|东京|JP|(?i)Japan

  - name: America # 美国节点
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/United_States.png
    <<: *u
    filter: 美|🇺🇲|US|(?i)States|American

  - name: Others # 其他节点
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/mini/Airport.png
    <<: *u
    proxies:
      - DIRECT

rule-providers: # 远程规则集

  LAN: # 局域网
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/LocalAreaNetwork.yaml"
    path: ./ruleset/Lan.yaml

  UnBan: # 规则修正
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/UnBan.yaml"
    path: ./ruleset/UnBan.yaml

  BanAD: # 广告拦截
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanAD.yaml"
    path: ./ruleset/BanAD.yaml

  OpenAI: # > ChatGPT
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/Coldvvater/Mononoke/master/Stash/RuleSet/OpenAI.yaml"
    path: ./ruleset/OpenAI.yaml

  BiliBili: # 哔哩哔哩
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Bilibili.yaml"
    path: ./ruleset/BiliBili.yaml

  Spotify: # 声田音乐
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Spotify.yaml"
    path: ./ruleset/Spotify.yaml

  TikTok: # 海外抖音
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/TikTok/TikTok.yaml"
    path: ./ruleset/TikTok.yaml

  ProxyMedia: # 国际媒体
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ProxyMedia.yaml"
    path: ./ruleset/ProxyMedia.yaml

  Telegram: # 电报信息
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Telegram.yaml"
    path: ./ruleset/Telegram.yaml

  Apple: # 苹果服务
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Apple.yaml"
    path: ./ruleset/Apple.yaml

  Microsoft: # 微软服务
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Microsoft.yaml"
    path: ./ruleset/Microsoft.yaml

  ChinaDomain: # 国内网站
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaDomain.yaml"
    path: ./ruleset/ChinaDomain.yaml

  ChinaMedia: # 国内媒体
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaMedia.yaml"
    path: ./ruleset/ChinaMedia.yaml

  ChinaCompanyIp: # 国内服务商IP
    <<: *ip
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaCompanyIp.yaml"
    path: ./ruleset/ChinaCompanyIp.yaml

  ChinaIp: # 国内网站IP
    <<: *ip
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ChinaIp.yaml"
    path: ./ruleset/ChinaIp.yaml

  ProxyGFWlist: # 国外网站
    <<: *c
    url: "https://ghproxy.com/https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/ProxyGFWlist.yaml"
    path: ./ruleset/ProxyGFWlist.yaml

rules: # 分流规则引用
  - SCRIPT,quic,REJECT
  - SCRIPT,BilibiliUdp,REJECT
  - RULE-SET,LAN,DIRECT
  - RULE-SET,UnBan,DIRECT
  - RULE-SET,BanAD,AdBlock
  - RULE-SET,OpenAI,America
  - RULE-SET,BiliBili,BiliBili
  - RULE-SET,Spotify,Spotify
  - RULE-SET,TikTok,TikTok
  - RULE-SET,ProxyMedia,Streaming
  - RULE-SET,Telegram,Telegram
  - RULE-SET,Apple,Apple
  - RULE-SET,Microsoft,Microsoft
  - RULE-SET,ChinaDomain,Domestic
  - RULE-SET,ChinaMedia,Domestic
  - RULE-SET,ChinaCompanyIp,Domestic
  - RULE-SET,ChinaIp,Domestic
  - RULE-SET,ProxyGFWlist,Foreign
  - GEOIP,CN,DIRECT,no-resolve
  - MATCH,Final
script:
  shortcuts:
    quic: network == 'udp' and (dst_port == 443 or dst_port == 4483 or dst_port == 9305)
    BilibiliUdp: network == "udp" and match_provider("BiliBili")
